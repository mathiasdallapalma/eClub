FORMAT: 1A
HOST: http://eclub.herokuapp.com

# eClub API

L’obiettivo generale di **eClub** quello di semplificare tutto ciò che riguarda l'organizzazione e la gestione di un’associazione sportiva di media grandezza.
In particolare **eClub** si prefigge di:
- digitalizzare tutte le attività di amministrazione (dall’iscrizione di nuovi associati alla
verifica delle scadenze delle visite mediche);
- sostenere le società sportive come luogo di aggregazione rendendone più snella e
sicura la gestione;
- dare alle società sportive una nuova possibilità di innovarsi in campo digitale.

**eClub** permette ad ogni associazione di configurare e visualizzare tutte le informazioni
relative alle proprie squadre composte ciascuna da Team Manager, Coach e Atleti.

## User [/api/v1/user]

### List all users [GET]

+ Response 201 (application/json)

            [
                {
                    "_id": "62987f9e04224e2d33075e28",
                    "email": "giovanni@storti.it",
                    "password": "$2a$10$HpjRQaVGbdkRBtnBzolrH.XGMzkK9wOmWCcKax4GRPlfNk0yHOvIu",
                    "name": "Giovanni",
                    "surname": "Storti",
                    "a_type": {
                        "_id": "62987f2b04224e2d33075e22",
                        "name": "Dirigente del Direttivo",
                        "type": 1
                    },
                    "zip": "38016",
                    "city": "Mezzocorona",
                    "province": "TN",
                    "nation": "IT",
                    "street": "Via Arrotati 10",
                    "phone": "340432543",
                    "status": 0,
                    "hidden": false,
                    "added_by": {
                        "_id": "62987f9e04224e2d33075e28",
                        "name": "Mario",
                        "surname": "Rossi"
                    },
                    "created_at": "2022-06-02T09:15:10.502Z",
                    "__v": 0,
                    "birth": "1966-03-12T00:00:00.000Z"
                }
            ]

+ Response 401 (application/json)

    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

### Add a new User [POST]
You may add a new user using this action. It takes a JSON object containing the necessary information.

+ Parameters

    - email: user@domain.it (String) - ###### required
    - password: sdfe2w23! (String) - ###### required
    - name: Samuel (String) - ###### not required
    - surname: Rossi (String) - ###### not required
    - birth: 10/10/1999 (Date) - ###### required
    - a_type: 62987f2b04224e2d33075e22 (ObjectId) - ###### not required
    - zip: 38016 (String) - ###### not required
    - city: Trento (String) - ###### not required
    - province: TN (String) - ###### not required
    - nation: IT (String) - ###### not required
    - street: Via Verdi 5 (String) - ###### not required
    - phone: 3482747820 (String) - ###### not required
    - status: 0 (Number) - ###### not required
    - hidden: 0 (Boolean) - ###### not required
    - team_id: wefwweewf (ObjectId) - ###### not required
    - added_by: sd3fe2w23 (ObjectId) - ###### required
    - created_at: 2020/12/13 (Date) - ###### required
    - updated_at: 2020/12/13 (Date) - ###### required
    - deleted_at: 2020/12/13 (Date) - ###### required

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

            {
                "email": "giovanni@storti.it",
                "name":"Giovanni",
                "surname": "Storti",
                "password": "trecaratterieunpunto",
                "a_type":"62987f2b04224e2d33075e22",
                "birth": "10/10/1999",
                "zip":"38016",
                "city":"Mezzocorona",
                "province":"TN",
                "nation":"IT",
                "street":"Via Arrotati 10",
                "phone":"340432543",
                "added_by":"628905acfc8a650ccd42368e"
            }
            
+ Response 201 (application/json)

    + Headers

            Location: /api/v1/user/

    + Body

            {
                "user": "628bca9fd92d31c040d82474"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Validation error"
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

## Specific User [/api/v1/user/{idUser}]

### Getting specific user[GET]

+ Request (application/json)

    + Headers
    
            auth-token: token

+ Response 201 (application/json)

            [
                {
                    "_id": "62987f9e04224e2d33075e28",
                    "email": "giovanni@storti.it",
                    "password": "$2a$10$HpjRQaVGbdkRBtnBzolrH.XGMzkK9wOmWCcKax4GRPlfNk0yHOvIu",
                    "name": "Giovanni",
                    "surname": "Storti",
                    "a_type": {
                        "_id": "62987f2b04224e2d33075e22",
                        "name": "Dirigente del Direttivo"
                    },
                    "zip": "38016",
                    "city": "Mezzocorona",
                    "province": "TN",
                    "nation": "IT",
                    "street": "Via Arrotati 10",
                    "phone": "340432543",
                    "status": 0,
                    "hidden": false,
                    "added_by": {
                        "_id": "62987f9e04224e2d33075e28",
                        "name": "Mario",
                        "surname": "Rossi"
                    },
                    "created_at": "2022-06-02T09:15:10.502Z",
                    "__v": 0,
                    "birth": "1966-03-12T00:00:00.000Z"
                }
            ]

+ Response 401 (application/json)

    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }
            
### Update a specific user [PATCH]

You may update an existing user using this action. It takes a JSON object containing the new complete information.

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

            {
                "email": "giovanni@storti.it",
                "name":"Giovanni",
                "surname": "Storti",
                "password": "trecaratterieunpunto",
                "a_type":"62987f9e04224e2d33075e28",
                "zip":"38016",
                "city":"Mezzocorona",
                "province":"TN",
                "nation":"IT",
                "street":"Via Arrotati 10",
                "phone":"340432543",
                "added_by":"62987f9e04224e2d33075e28"
            }

+ Response 200 (application/json)

    + Headers

            Location: /api/v1/user/

    + Body

            {
                "message": "Success updating"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Object sent is not a user."
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"No token provided."
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

### Delete a specific user [DELETE]

You may delete an existing user using this action. It takes a JSON object containing the id of the user to delete.

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

            {
                "_id": "62894da00842bba6fcfbc9a3",
            }


+ Response 200 (application/json)
    + Headers

            Location: /api/v1/user/
            
    + Body

            {
                "result":"Succesfully removed `req.body.id`"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Object passed has incorrect values."
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"No token provided."
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }
            
## Team [/api/v1/team]
### List all teams [GET]

+ Response 201 (application/json)

    [
        {
            "_id": "628a8b0dd4e5704c4c5098e7",
            "category": "Esordienti",
            "status": 0,
            "hidden": 0,
            "added_by": "23",
            "created_at": "2022-05-22T19:12:13.819Z",
            "__v": 0
        },
    ]

+ Response 401 (application/json)

    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

### Add a new team [POST]
You may add a new team using this action. It takes a JSON object containing the necessary information.

+ Parameters

    - category: Esordienti (String) - ###### requiredx
    - status: 0 (Number) - ###### not required
    - hidden: 0 (Boolean) - ###### not required
    - added_by: sd3fe2w23 (String) - ###### required
    - created_at: 2020/12/13 (Date) - ###### required
    - updated_at: 2020/12/13 (Date) - ###### not required
    - deleted_at: 2020/12/13 (Date) - ###### not required
    
    
+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

            {
                "category":"Esordienti",x
                "status":"0",
                "hidden":"0",
                "added_by":"1"
            }

+ Response 201 (application/json)

    + Headers

            Location: /api/v1/team/

    + Body

            {
                "team": "628bca9fd92d31c040d82474"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Validation error"
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

## Specific Team [/api/v1/team/{idTeam}]
### Update a specific team [PATCH]

You may update an existing user using this action. It takes a JSON object containing the new complete information.

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

             {
                "category":"Esordienti",a
                "status":"0",
                "hidden":"0",
            }

+ Response 200 (application/json)

    + Headers

            Location: /api/v1/team/

    + Body

            {
                "message": "Success updating"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Object sent is not a user."
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"No token provided."
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

### Delete a specific team [DELETE]

You may delete an existing team using this action. It takes a JSON object containing the id of the team to delete.

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body
            {
                "_id": "62894da00842bba6fcfbc9a3",
            }

+ Response 200 (application/json)
    + Headers

            Location: /api/v1/user/
            
    + Body

            {
                "result":"Succesfully removed `req.body.id`"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Object passed has incorrect values."
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"No token provided."
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }
## User Type [/api/v1/usertype]
### List all User Type [GET]

+ Response 201 (application/json)

    [
        {
            "_id": "628aa05b963e0dc94bae524d",
            "name": "Team Manager",
            "type": 1,
            "__v": 0
        },
    ]

+ Response 401 (application/json)

    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

### Add a new user type [POST]
You may add a new user type using this action. It takes a JSON object containing the necessary information.

+ Parameters

    - name: Team Manager (String) - ###### required
    - type: 1 (Number) - ###### required
    
    
+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

            {
                "name":"Team Manager",
                "type": "3",
            }

+ Response 201 (application/json)

    + Headers

            Location: /api/v1/usertype/

    + Body

            {
                "user-type": "628bca9fd92d31c040d82474"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Validation error"
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

## Specific User Type [/api/v1/usertype/{idUserType}]
### Update a specific user type [PATCH]

You may update an existing user using this action. It takes a JSON object containing the new complete information.

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

             {
                "name":"Coach",
                "type": "0",
            }

+ Response 200 (application/json)

    + Headers

            Location: /api/v1/usertype/

    + Body

            {
                "message": "Success updating"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Object sent is not a user."
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"No token provided."
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

### Delete a specific user type [DELETE]

You may delete an existing user type using this action. It takes a JSON object containing the id of the user type to delete.

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body
            {
                "_id": "62894da00842bba6fcfbc9a3",
            }

+ Response 200 (application/json)
    + Headers

            Location: /api/v1/usertype/
            
    + Body

            {
                "result":"Succesfully removed `req.body.id`"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Object passed has incorrect values."
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"No token provided."
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

## Login [/api/v1/auth]
### Login [POST]

+ Parameters

    - email: user@domain.com (String) - ###### required
    - password: "password" (String) - ###### required

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

            {
                "email":"giovanni@storti.it",
                "password": "password",
            }
    
+ Response 201 (application/json)

            {
                "jwt": "628905746649202d56fd402engrufsdi.fvdfgbfdgjythfgdbvcfghtfgdvcbnghg.dfcdseregfbvc-xsdfgh",
                "rt": "uhgrfbdonufehgjgiru758493.guriofdjvsmfkndjwfifob.39485tuifvdsafg"
            }

+ Response 400 (application/json)

    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 500 (application/json)

            {
                "error": "Database error message"
            }
            
## Password Reset [/api/v1/password_reset]
### Reset [POST]

+ Parameters

    - email: user@domain.com (String) - ###### required
    - password: "password" (String) - ###### required

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

            {
                "email":"giovanni@storti.it",
                "password": "password",
            }

+ Response 201 (application/json)

            {
                "message": "Succesfully notified user",
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"Error sending email"
            }
            
## Password Updating [/api/v1/password_reset/{token}]

### Updating [PUT]

+ Parameters

    - email: user@domain.com (String) - ###### required
    - password: "password" (String) - ###### required

+ Response 201 (application/json)

            {
                "message": "Successfully changes user password",
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"No token provided."
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }
            
+ Response 500 (application/json)

            {
                "error": "Error updating user password"
            }

## Event [/api/v2/event]

### List all events [GET]

+ Request (application/json)

    + Headers
    
            auth-token: token

+ Response 201 (application/json)

            [
                {
                    "_id": "629b19c317d2c125ef102c69",
                    "title": "Evento 1",
                    "date": "2022-06-02T21:30:00.000Z",
                    "description": "descrizione dell'evento",
                    "teams": [
                        {
                            "_id": "6298c3103818deda59b34104",
                            "category": "Esordienti"
                        }
                    ],
                    "e_type": {
                        "_id": "629643542cfad8fa95f70c1e",
                        "name": "Partita"
                    },
                    "status": 0,
                    "hidden": 0,
                    "added_by": "628905acfc8a650ccd42368e",
                    "created_at": "2022-06-04T08:37:23.993Z",
                    "__v": 0,
                    
                }
            ]

+ Response 401 (application/json)

    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

### Add a new Event [POST]
You may add a new event using this action. It takes a JSON object containing the necessary information.

+ Parameters

    - tittle: Partita Finale (String) - ###### required
    - date: 2020-03-29T15:30:00.000 (String) - ###### required
    - description: Finale di campionato contro Mezzoorona AC (String) - ###### not required
    - e_type: 6296433c2cfad8fa95f70c1b (ObjectId) - ###### required
    - teams: [6297c78a46b44412fbc25485] (Array) - ###### required
    - status: 0 (Number) - ###### not required
    - hidden: 0 (Boolean) - ###### not required
    - added_by: sd3fe2w23 (ObjectId) - ###### required
    - created_at: 2020/12/13 (Date) - ###### required
    - updated_at: 2020/12/13 (Date) - ###### required
    - deleted_at: 2020/12/13 (Date) - ###### required

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

            {
                "title":"Quarto di andata",
                "date":"2020-03-29T15:30:00.000",
                "description":"desc",
                "added_by":"deade23131d123d1e1",
                "e_type":"6296433c2cfad8fa95f70c1b",
                "teams":["6297c78a46b44412fbc25485"],
                "added_by":"628905acfc8a650ccd42368e"
            }
            
+ Response 201 (application/json)

    + Headers

            Location: /api/v2/event/

    + Body

            {
                "user": "628bca9fd92d34c040d82474"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Validation error"
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

## Specific Event [/api/v2/event/{idEvent]

### Getting specific event[GET]

+ Request (application/json)

    + Headers
    
            auth-token: token

+ Response 201 (application/json)

            
            {
                "_id": "629b19c317d2c125ef102c69",
                "title": "Evento1",
                "date": "2022-06-02T21:30:00.000Z",
                "description": "descrizione dell'evento",
                "teams": [
                    {
                        "_id": "6298c3103818deda59b34104",
                        "category": "Esordienti"
                    }
                ],
                "e_type": {
                    "_id": "629643542cfad8fa95f70c1e",
                    "name": "Partita"
                },
                "status": 0,
                "hidden": 0,
                "added_by": "628905acfc8a650ccd42368e",
                "created_at": "2022-06-04T08:37:23.993Z",
                "__v": 0,
            }
            

+ Response 401 (application/json)

    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

### Update a specific event [PATCH]

You may update an existing event using this action. It takes a JSON object containing the new complete information.

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

            {
                "title": "Quarto di andata",
                "date": "2020-03-29T15:30:00.000",
                "description": "desc",
                "added_by": "deade23131d123d1e1",
                "e_type": "6296433c2cfad8fa95f70c1b",
                "teams":["6297c78a46b44412fbc25485"],
                "added_by": "62987f9e04224e2d33075e28"
            }

+ Response 200 (application/json)

    + Headers

            Location: /api/v2/event/

    + Body

            {
                "message": "Success updating"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Object sent is not a event."
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"No token provided."
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

### Delete a specific event [DELETE]

You may delete an existing user using this action. It takes a JSON object containing the id of the user to delete.

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

            {
                "_id": "62894da00842bba6fcfbc9a3",
            }


+ Response 200 (application/json)
    + Headers

            Location: /api/v2/event/
            
    + Body

            {
                "result":"Succesfully removed `req.body.id`"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Object passed has incorrect values."
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"No token provided."
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }


## Event Type [/api/v2/eventtype]
### List all Event Type [GET]

+ Response 201 (application/json)

[
    {
        "_id": "628aa05b963e0dc94bae524d",
        "name": "Partita",
        "type": 1,
        "__v": 0
    }
]

+ Response 401 (application/json)

    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

### Add a new event type [POST]
You may add a new event type using this action. It takes a JSON object containing the necessary information.

+ Parameters

    - name: Partita (String) - ###### required
    - type: 1 (Number) - ###### required
    
    
+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

            {
                "name":"Partita",
                "type": "1",
            }

+ Response 201 (application/json)

    + Headers

            Location: /api/v2/eventtype/

    + Body

            {
                "event-type": "628bca9fd92d31c040d82474"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Validation error"
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

## Specific Event Type [/api/v1/eventtype/{idEventType}]
### Update a specific event type [PATCH]

You may update an existing event using this action. It takes a JSON object containing the new complete information.

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

             {
                "name":"Allenamento",
                "type": "0",
            }

+ Response 200 (application/json)

    + Headers

            Location: /api/v2/eventtype/

    + Body

            {
                "message": "Success updating"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Object sent is not a eventType."
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"No token provided."
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

### Delete a specific event type [DELETE]

You may delete an existing event type using this action. It takes a JSON object containing the id of the user type to delete.

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body
            {
                "_id": "62894da00842bba6fcfbc9a3",
            }

+ Response 200 (application/json)
    + Headers

            Location: /api/v2/eventtype/
            
    + Body

            {
                "result":"Succesfully removed `req.body.id`"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Object passed has incorrect values."
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"No token provided."
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

## Attendance [/api/v2/attendance]

### List all Attendance [GET]

+ Response 201 (application/json)

           [
                {
                    "_id": "629b19c417d2c125ef102c71",
                    "event": {
                        "_id": "629b19c317d2c125ef102c69",
                        "title": "Evento1",
                        "date": "2022-06-02T21:30:00.000Z"
                    },
                    "player": {
                        "_id": "629908391b943ad700b52c63",
                        "name": "Gianfranco",
                        "surname": "Ariosto"
                    },
                    "value": false,
                    "status": 0,
                    "hidden": 0,
                    "added_by": "628905acfc8a650ccd42368e",
                    "created_at": "2022-06-04T08:37:24.931Z",
                    "__v": 0
                }
            ]

+ Response 401 (application/json)

    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }
        
### Add a new attendance [POST]
You may add a new user using this action. It takes a JSON object containing the necessary information.

+ Parameters

    - player: user@629272f3c8a1c137d5e6ca6c.it (ObjectId) - ###### required
    - event: 62986cb047de012aab2dac4c (String) - ###### required
    - value: true (Boolean) - ###### required
    - status: 0 (Number) - ###### not required
    - hidden: 0 (Boolean) - ###### not required
    - added_by: sd3fe2w23 (ObjectId) - ###### required
    - created_at: 2020/12/13 (Date) - ###### required
    - updated_at: 2020/12/13 (Date) - ###### required
    - deleted_at: 2020/12/13 (Date) - ###### required

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

            {
                "player":"629272f3c8a1c137d5e6ca6c",
                "event": "62986cb047de012aab2dac4c",
                "value":true,
                "added_by": "62927232c8a1c137d5e6ca4f"
            }
            
+ Response 201 (application/json)

    + Headers

            Location: /api/v2/attendance/

    + Body

            {
                "attendance": "628bca9fd92d31c040d82474"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Validation error"
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

## Attendances By Player [/api/v1/attendance/player/{idPlayer}]
### List all attendances of scpecific player [GET]
+ Request (application/json)

    + Headers
    
            auth-token: token

+ Response 201 (application/json)

            [
                {
                    "_id": "629b19c417d2c125ef102c71",
                    "event": {
                        "_id": "629b19c317d2c125ef102c69",
                        "title": "Evento1",
                        "date": "2022-06-02T21:30:00.000Z"
                    },
                    "player": "629908391b943ad700b52c63",
                    "value": false,
                    "status": 0,
                    "hidden": 0,
                    "added_by": "628905acfc8a650ccd42368e",
                    "created_at": "2022-06-04T08:37:24.931Z",
                    "__v": 0
                },
            ]

+ Response 401 (application/json)

    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

## Attendances By Event [/api/v1/attendance/event/{idEvent}]
### List all attendances of scpecific event [GET]
+ Request (application/json)

    + Headers
    
            auth-token: token

+ Response 201 (application/json)

            [
                {
                    "_id": "629b19c417d2c125ef102c71",
                    "event": "629b19c317d2c125ef102c69",
                    "player": {
                        "_id": "629908391b943ad700b52c63",
                        "name": "Gianfranco",
                        "surname": "Ariosto"
                    },
                    "value": false,
                    "status": 0,
                    "hidden": 0,
                    "added_by": "628905acfc8a650ccd42368e",
                    "created_at": "2022-06-04T08:37:24.931Z",
                    "__v": 0
                },
            ]

+ Response 401 (application/json)

    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

## Specific Attendance [/api/v2/attendance/{idAttendance}]
### Update a specific attendance [PATCH]

You may update an existing attendance using this action. It takes a JSON object containing the new complete information.

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

            {
                "player":"629272f3c8a1c137d5e6ca6c",
                "event": "62986cb047de012aab2dac4c",
                "value":true,
                "added_by": "62927232c8a1c137d5e6ca4f"
            }

+ Response 200 (application/json)

    + Headers

            Location: /api/v2/attendance/

    + Body

            {
                "message": "Success updating"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Object sent is not a attendance."
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"No token provided."
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

### Delete a specific attendance [DELETE]

You may delete an existing attendance using this action. It takes a JSON object containing the id of the user to delete.

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

            {
                "_id": "62894da00842bba6fcfbc9a3",
            }


+ Response 200 (application/json)
    + Headers

            Location: /api/v2/attendance/
            
    + Body

            {
                "result":"Succesfully removed `req.body.id`"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Object passed has incorrect values."
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"No token provided."
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

## Summonings [/api/v2/summoning]

### List all Summonings [GET]

+ Response 201 (application/json)

           [
                {
                    "_id": "629b19c417d2c125ef102c71",
                    "event": {
                        "_id": "629b19c317d2c125ef102c69",
                        "title": "Evento1",
                        "date": "2022-06-02T21:30:00.000Z"
                    },
                    "player": {
                        "_id": "629908391b943ad700b52c63",
                        "name": "Gianfranco",
                        "surname": "Ariosto"
                    },
                    "value": false,
                    "status": 0,
                    "hidden": 0,
                    "added_by": "628905acfc8a650ccd42368e",
                    "created_at": "2022-06-04T08:37:24.931Z",
                    "__v": 0
                }
            ]

+ Response 401 (application/json)

    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }
        
### Add a new summoning [POST]
You may add a new summoning using this action. It takes a JSON object containing the necessary information.

+ Parameters

    - player: 629272f3c8a1c137d5e6ca6c (ObjectId) - ###### required
    - event: 62986cb047de012aab2dac4c (String) - ###### required
    - value: true (Boolean) - ###### required
    - status: 0 (Number) - ###### not required
    - hidden: 0 (Boolean) - ###### not required
    - added_by: sd3fe2w23 (ObjectId) - ###### required
    - created_at: 2020/12/13 (Date) - ###### required
    - updated_at: 2020/12/13 (Date) - ###### required
    - deleted_at: 2020/12/13 (Date) - ###### required

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

            {
                "player":"629272f3c8a1c137d5e6ca6c",
                "event": "62986cb047de012aab2dac4c",
                "value":true,
                "added_by": "62927232c8a1c137d5e6ca4f"
            }
            
+ Response 201 (application/json)

    + Headers

            Location: /api/v2/summoning/

    + Body

            {
                "summoning": "628bca9fd92d31c040d82474"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Validation error"
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

## Summonings By Player [/api/v1/summoning/player/{idPlayer}]
### List all summonings of scpecific player [GET]
+ Request (application/json)

    + Headers
    
            auth-token: token

+ Response 201 (application/json)

            [
                {
                    "_id": "629b19c417d2c125ef102c71",
                    "event": {
                        "_id": "629b19c317d2c125ef102c69",
                        "title": "Evento1",
                        "date": "2022-06-02T21:30:00.000Z"
                    },
                    "player": "629908391b943ad700b52c63",
                    "value": false,
                    "status": 0,
                    "hidden": 0,
                    "added_by": "628905acfc8a650ccd42368e",
                    "created_at": "2022-06-04T08:37:24.931Z",
                    "__v": 0
                },
            ]

+ Response 401 (application/json)

    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

## Summoning By Event [/api/v1/summoning/event/{idEvent}]
### List all summoning of scpecific event [GET]
+ Request (application/json)

    + Headers
    
            auth-token: token

+ Response 201 (application/json)

            [
                {
                    "_id": "629b19c417d2c125ef102c71",
                    "event": "629b19c317d2c125ef102c69",
                    "player": {
                        "_id": "629908391b943ad700b52c63",
                        "name": "Gianfranco",
                        "surname": "Ariosto"
                    },
                    "value": false,
                    "status": 0,
                    "hidden": 0,
                    "added_by": "628905acfc8a650ccd42368e",
                    "created_at": "2022-06-04T08:37:24.931Z",
                    "__v": 0
                },
            ]

+ Response 401 (application/json)

    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

## Specific Summoning [/api/v2/summoning/{idSummoning}]
### Update a specific summoning [PATCH]

You may update an existing summoning using this action. It takes a JSON object containing the new complete information.

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

            {
                "player":"629272f3c8a1c137d5e6ca6c",
                "event": "62986cb047de012aab2dac4c",
                "value":true,
                "added_by": "62927232c8a1c137d5e6ca4f"
            }

+ Response 200 (application/json)

    + Headers

            Location: /api/v2/summoning/

    + Body

            {
                "message": "Success updating"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Object sent is not a summoning."
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"No token provided."
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

### Delete a specific summoning [DELETE]

You may delete an existing summoning using this action. It takes a JSON object containing the id of the user to delete.

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

            {
                "_id": "62894da00842bba6fcfbc9a3",
            }


+ Response 200 (application/json)
    + Headers

            Location: /api/v2/summoning/
            
    + Body

            {
                "result":"Succesfully removed `req.body.id`"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Object passed has incorrect values."
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"No token provided."
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

## Evaluation [/api/v2/evaluation]

### List all Evaluation [GET]

+ Response 201 (application/json)

           [
                {
                    "_id": "629b19c417d2c125ef102c71",
                    "event": {
                        "_id": "629b19c317d2c125ef102c69",
                        "title": "Evento1",
                        "date": "2022-06-02T21:30:00.000Z"
                    },
                    "player": {
                        "_id": "629908391b943ad700b52c63",
                        "name": "Gianfranco",
                        "surname": "Ariosto"
                    },
                    "value": false,
                    "status": 0,
                    "hidden": 0,
                    "added_by": "628905acfc8a650ccd42368e",
                    "created_at": "2022-06-04T08:37:24.931Z",
                    "__v": 0
                }
            ]

+ Response 401 (application/json)

    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }
        
### Add a new evaluation [POST]
You may add a new evaluation using this action. It takes a JSON object containing the necessary information.

+ Parameters

    - player: 629272f3c8a1c137d5e6ca6c (ObjectId) - ###### required
    - event: 62986cb047de012aab2dac4c (String) - ###### required
    - value: 8 (Number) - ###### required
    - status: 0 (Number) - ###### not required
    - hidden: 0 (Boolean) - ###### not required
    - added_by: sd3fe2w23 (ObjectId) - ###### required
    - created_at: 2020/12/13 (Date) - ###### required
    - updated_at: 2020/12/13 (Date) - ###### required
    - deleted_at: 2020/12/13 (Date) - ###### required

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

            {
                "player":"629272f3c8a1c137d5e6ca6c",
                "event": "62986cb047de012aab2dac4c",
                "value":8,
                "added_by": "62927232c8a1c137d5e6ca4f"
            }
            
+ Response 201 (application/json)

    + Headers

            Location: /api/v2/evaluation/

    + Body

            {
                "evaluation": "628bca9fd92d31c040d82474"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Validation error"
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

## Evaluation By Player [/api/v1/evaluation/player/{idPlayer}]
### List all evaluation of scpecific player [GET]
+ Request (application/json)

    + Headers
    
            auth-token: token

+ Response 201 (application/json)

            [
                {
                    "_id": "629b19c417d2c125ef102c71",
                    "event": {
                        "_id": "629b19c317d2c125ef102c69",
                        "title": "Evento1",
                        "date": "2022-06-02T21:30:00.000Z"
                    },
                    "player": "629908391b943ad700b52c63",
                    "value": 7,
                    "status": 0,
                    "hidden": 0,
                    "added_by": "628905acfc8a650ccd42368e",
                    "created_at": "2022-06-04T08:37:24.931Z",
                    "__v": 0
                },
            ]

+ Response 401 (application/json)

    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

## Evaluation By Event [/api/v1/evaluation/event/{idEvent}]
### List all evaluation of scpecific event [GET]
+ Request (application/json)

    + Headers
    
            auth-token: token

+ Response 201 (application/json)

            [
                {
                    "_id": "629b19c417d2c125ef102c71",
                    "event": "629b19c317d2c125ef102c69",
                    "player": {
                        "_id": "629908391b943ad700b52c63",
                        "name": "Gianfranco",
                        "surname": "Ariosto"
                    },
                    "value": 5,
                    "status": 0,
                    "hidden": 0,
                    "added_by": "628905acfc8a650ccd42368e",
                    "created_at": "2022-06-04T08:37:24.931Z",
                    "__v": 0
                },
            ]

+ Response 401 (application/json)

    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

## Specific Evaluation [/api/v2/evaluation/{idEvaluation}]
### Update a specific evaluation [PATCH]

You may update an existing evaluation using this action. It takes a JSON object containing the new complete information.

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

            {
                "player":"629272f3c8a1c137d5e6ca6c",
                "event": "62986cb047de012aab2dac4c",
                "value":10,
                "added_by": "62927232c8a1c137d5e6ca4f"
            }

+ Response 200 (application/json)

    + Headers

            Location: /api/v2/evaluation/

    + Body

            {
                "message": "Success updating"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Object sent is not a summoning."
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"No token provided."
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

### Delete a specific evaluation [DELETE]

You may delete an existing evaluation using this action. It takes a JSON object containing the id of the user to delete.

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

            {
                "_id": "62894da00842bba6fcfbc9a3",
            }


+ Response 200 (application/json)
    + Headers

            Location: /api/v2/evaluation/
            
    + Body

            {
                "result":"Succesfully removed `req.body.id`"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Object passed has incorrect values."
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"No token provided."
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

## Payment [/api/v2/payment]

### List All Payments [GET]

+ Response 201 (application/json)

        [
            {
                "amount": "200",
                "description":"prima rata",
                "paid_at": "05/06/2022",
                "player": {
                    "_id": "62987f9e04224e2d33075e28",
                    "name": "Mario",
                    "surname": "Rossi"
                },

            }
        ]
+ Response 401 (application/json)

    + Body

            {
                "error":"Invalid Token"
            }
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }
### Add a new Payment [POST]
You may add a new payment using this action. It takes a JSON object containing the necessary information.

+ Parameters

    - amount: 200 (Number) - ###### required
    - description: prima rata (String) - ###### not required
    - paid_at: 05/06/2022 (Date) - ###### required
    - player: 628905acfc8a650ccd42368e (ObjectId) - ###### required

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

            {
                "amount": "200",
                "description":"prima rata",
                "paid_at": "05/06/2022",
                "player": "628905acfc8a650ccd42368e",
            }

+ Response 201 (application/json)

    + Headers

            Location: /api/v2/payment/

    + Body

            {
                "payment": "628905acfc8a650ccd42368e"
            }
+ Response 401 (application/json)


    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

## Specific Payment [/api/v2/payment/{idPayment}]

### Getting specific payment[GET]

+ Request (application/json)

    + Headers
    
            auth-token: token

+ Response 201 (application/json)

        [
            {
            "amount": "200",
            "description":"prima rata",
            "paid_at": "05/06/2022",
            "player": {
                "_id": "62987f9e04224e2d33075e28",
                "name": "Mario",
                "surname": "Rossi"
            },
        ]

+ Response 401 (application/json)

    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

### Update a specific payment [PATCH]

You may update an existing payment using this action. It takes a JSON object containing the new complete information.

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

            {
                "amount": "200",
                "description":"prima rata",
                "paid_at": "05/06/2022",
                "player": "628905acfc8a650ccd42368e",
            }

+ Response 200 (application/json)

    + Headers

            Location: /api/v2/payment/

    + Body

            {
                "message": "Success updating"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Object sent is not a payment."
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"No token provided."
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }
            
### Delete a specific payment [DELETE]

You may delete an existing payment using this action. It takes a JSON object containing the id of the payment to delete.

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

            {
                "_id": "62894da00842bba6fcfbc9a3",
            }


+ Response 200 (application/json)
    + Headers

            Location: /api/v2/payment/
            
    + Body

            {
                "result":"Succesfully removed `req.body.id`"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Object passed has incorrect values."
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"No token provided."
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }
            
## Med certificate [/api/v2/med]

### List all med certificates [GET]

+ Response 201 (application/json)

            [
                {
                    "released_at": "2022-06-02T09:15:10.502Z",
                    "expiring_at": "2023-06-02T09:15:10.502Z",
                    "player": {
                        "_id": "62987f9e04224e2d33075e28",
                        "name": "Mario",
                        "surname": "Rossi"
                    },
                    "doctor": "Studio Medicina dello Sport Enrico Rossi",
                    "med_type": "Certificato medico agonistico",
                    "verified": "0"
                }
            ]

+ Response 401 (application/json)

    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

### Add a new Med Certificate [POST]
You may add a new med certificate using this action. It takes a JSON object containing the necessary information.

+ Parameters
    - released_at: 02/05/2022 (Date) - ###### required
    - expiring_at: 02/05/2023 (Date) - ###### required
    - player: 62987f2b04224e2d33075e22 (ObjectId) - ###### required
    - doctor: Studio Medicina dello Sport Enrico Rossi (String) - ###### not required
    - med_type: Certificato medico agonistico (String) - ###### not required

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

            {
                "released_at": "2022-06-02T09:15:10.502Z",
                "expiring_at": "2023-06-02T09:15:10.502Z",
                "player": "62987f2b04224e2d33075e22",
                "doctor": "Studio Medicina dello Sport Enrico Rossi",
                "med_type": "Certificato medico agonistico",
                "verified": "True"
            }
            
+ Response 201 (application/json)

    + Headers

            Location: /api/v2/med/

    + Body

            {
                "med": "628bca9fd92d31c040d82474"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Validation error"
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"Invalid Token"
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

## Specific Med certificate [/api/v2/med/{idMed}]

### Getting specific Med certificate[GET]

+ Request (application/json)

    + Headers
    
            auth-token: token

+ Response 201 (application/json)

            [
                {
                    "released_at": "2022-06-02T09:15:10.502Z",
                    "expiring_at": "2023-06-02T09:15:10.502Z",
                    "player": {
                        "_id": "62987f9e04224e2d33075e28",
                        "name": "Mario",
                        "surname": "Rossi"
                    },
                    "doctor": "Studio Medicina dello Sport Enrico Rossi",
                    "med_type": "Certificato medico agonistico",
                    "verified": "True"
                }
            ]

+ Response 401 (application/json)

    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

### Update a specific med certificate [PATCH]

You may update an existing med certificate using this action. It takes a JSON object containing the new complete information.

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

            {
                "released_at": "2022-06-02T09:15:10.502Z",
                "expiring_at": "2023-06-02T09:15:10.502Z",
                "player": "62987f2b04224e2d33075e22",
                "doctor": "Studio Medicina dello Sport Enrico Rossi",
                "med_type": "Certificato medico agonistico",
                "verified": "True"
            }

+ Response 200 (application/json)

    + Headers

            Location: /api/v2/med/

    + Body

            {
                "message": "Success updating"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Object sent is not a med certificate."
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"No token provided."
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

### Delete a specific med certificate [DELETE]

You may delete an existing med certificate using this action. It takes a JSON object containing the id of the med certificate to delete.

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

            {
                "_id": "62894da00842bba6fcfbc9a3",
            }


+ Response 200 (application/json)
    + Headers

            Location: /api/v2/med/
            
    + Body

            {
                "result":"Succesfully removed `req.body.id`"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Object passed has incorrect values."
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"No token provided."
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

## Material [/api/v2/material]

### List All Materials [GET]

+ Response 201 (application/json)

        [
            {
                "description":"borsone",
                "player": {
                    "_id": "62987f9e04224e2d33075e28",
                    "name": "Mario",
                    "surname": "Rossi"
                },
                "given_at": "05/06/2022",
                "returned_at": "05/06/2022",
            }
        ]
+ Response 401 (application/json)
    + Body

            {
                "error":"Invalid Token"
            }

+ Response 403 (application/json)
    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

### Add a new Material [POST]
You may add a new material using this action. It takes a JSON object containing the necessary information.

+ Parameters

    - description: borsone (String) - ###### required
    - player: 628905acfc8a650ccd42368e (ObjectId) - ###### required
    - given_at: 05/06/2021 (Date) - ###### not required
    - returned_at: 05/06/2022 (Date) - ###### not required

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

            {
                "description": "borsone",
                "player":"628905acfc8a650ccd42368e",
                "given_at": "05/06/2021",
                "returned_at": "05/06/2022",
            }

+ Response 201 (application/json)

    + Headers

            Location: /api/v2/material/

    + Body

            {
                "material": "628905acfc8a650ccd42368e"
            }
+ Response 401 (application/json)


    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

## Specific Material [/api/v2/material/{idMaterial}]

### Getting specific material[GET]

+ Request (application/json)

    + Headers
    
            auth-token: token

+ Response 201 (application/json)

        [
            "description":"borsone",
            "player": {
                "_id": "62987f9e04224e2d33075e28",
                "name": "Mario",
                "surname": "Rossi"
            },
            "given_at": "05/06/2022",
            "returned_at": "05/06/2022",
        ]

+ Response 401 (application/json)

    + Body

            {
                "error":"Invalid Token"
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

### Update a specific material [PATCH]

You may update an existing material using this action. It takes a JSON object containing the new complete information.

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

            {
                "description": "borsone",
                "player":"628905acfc8a650ccd42368e",
                "given_at": "05/06/2021",
                "returned_at": "05/06/2022",
            }

+ Response 200 (application/json)

    + Headers

            Location: /api/v2/material/

    + Body

            {
                "message": "Success updating"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Object sent is not a material."
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"No token provided."
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }

### Delete a specific material [DELETE]

You may delete an existing material using this action. It takes a JSON object containing the id of the material to delete.

+ Request (application/json)

    + Headers
    
            auth-token: token
    
    + Body

            {
                "_id": "62894da00842bba6fcfbc9a3",
            }


+ Response 200 (application/json)
    + Headers

            Location: /api/v2/material/
            
    + Body

            {
                "result":"Succesfully removed `req.body.id`"
            }

+ Response 400 (application/json)


    + Body

            {
                "error":"Object passed has incorrect values."
            }

+ Response 401 (application/json)


    + Body

            {
                "error":"No token provided."
            }
            
+ Response 403 (application/json)


    + Body

            {
                "error":"Invalid token. / User is not admin."
            }

+ Response 500 (application/json)

            {
                "error": "Database error message"
            }